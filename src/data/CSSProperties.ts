import { PROPERTY_TYPE } from "./PropertyTypes";

class CSSProperty {
	key: string;
	initial: string;
	values: (string | PROPERTY_TYPE)[];

	constructor(prop: {
		key: string;
		initial: string;
		values: (string | PROPERTY_TYPE)[];
		syntax?: any;
	}) {
		this.key = prop.key;
		this.initial = prop.initial;
		this.values = prop.values;
	}
}

const CSS_PROPERTIES: { [name: string]: CSSProperty } = {
	"align-content": new CSSProperty({
		key: "alignContent",
		initial: "stretch",
		values: [
			"stretch",
			"center",
			"flex-start",
			"flex-end",
			"space-between",
			"space-around",
			"initial",
			"inherit",
		],
	}),
	"align-items": new CSSProperty({
		key: "alignItems",
		initial: "stretch",
		values: [
			"stretch",
			"center",
			"flex-start",
			"flex-end",
			"baseline",
			"initial",
			"inherit",
		],
	}),
	"align-self": new CSSProperty({
		key: "alignSelf",
		syntax: "(auto)|(stretch)|(center)|(flex-start)|(flex-end)|(baseline)|(initial)|(inherit)",
		initial: "auto",
		values: [
			"auto",
			"stretch",
			"center",
			"flex-start",
			"flex-end",
			"baseline",
			"initial",
			"inherit",
		],
	}),
	all: new CSSProperty({
		key: "all",
		syntax: "(initial)|(inherit)|(unset)",
		initial: "none",
		values: ["initial", "inherit", "unset"],
	}),
	animation: new CSSProperty({
		key: "animation",
		syntax: "(([prop:animation-name]) ([prop:animation-duration]) ([prop:animation-timing-function]) ([prop:animation-delay]) ([prop:animation-iteration-count]) ([prop:animation-direction]) ([prop:animation-fill-mode]) ([prop:animation-play-state]))|(initial)|(inherit)",
		initial: "none 0 ease 0 1 normal none running",
		values: [
			"[prop:animation-name]",
			"[prop:animation-duration]",
			"[prop:animation-timing-function]",
			"[prop:animation-delay]",
			"[prop:animation-iteration-count]",
			"[prop:animation-direction]",
			"[prop:animation-fill-mode]",
			"[prop:animation-play-state]",
			"initial",
			"inherit",
		],
	}),
	"animation-delay": new CSSProperty({
		key: "animationDelay",
		syntax: "([time])|(initial)|(inherit)",
		initial: "0s",
		values: ["[time]", "initial", "inherit"],
	}),
	"animation-direction": new CSSProperty({
		key: "animationDirection",
		syntax: "(normal)|(reverse)|(alternate)|(alternate-reverse)|(initial)|(inherit)",
		initial: "normal",
		values: [
			"normal",
			"reverse",
			"alternate",
			"alternate-reverse",
			"initial",
			"inherit",
		],
	}),
	"animation-duration": new CSSProperty({
		key: "animationDuration",
		syntax: "([time])|(initial)|(inherit)",
		initial: "0",
		values: ["[time]", "initial", "inherit"],
	}),
	"animation-fill-mode": new CSSProperty({
		key: "animationFillMode",
		syntax: "(none)|(forwards)|(backwards)|(both)|(initial)|(inherit)",
		initial: "none",
		values: ["none", "forwards", "backwards", "both", "initial", "inherit"],
	}),
	"animation-iteration-count": new CSSProperty({
		key: "animationIterationCount",
		syntax: "([number])|(infinite)|(initial)|(inherit)",
		initial: "1",
		values: ["[number]", "infinite", "initial", "inherit"],
	}),
	"animation-name": new CSSProperty({
		key: "animationName",
		syntax: "([label])|(none)|(initial)|(inherit)",
		initial: "none",
		values: ["[label]", "none", "initial", "inherit"],
	}),
	"animation-play-state": new CSSProperty({
		key: "animationPlayState",
		syntax: "(paused)|(running)|(initial)|(inherit)",
		initial: "running",
		values: ["paused", "running", "initial", "inherit"],
	}),
	"animation-timing-function": new CSSProperty({
		key: "animationTimingFunction",
		syntax: "(linear)|(ease)|(ease-in)|(ease-out)|(ease-in-out)|(step-start)|(step-end)|([steps])|[cubic-bezier]|(initial)|(inherit)",
		initial: "ease",
		values: [
			"linear",
			"ease",
			"ease-in",
			"ease-out",
			"ease-in-out",
			"step-start",
			"step-end",
			"[steps]",
			"cubic-bezier",
			"initial",
			"inherit",
		],
	}),
	"backface-visibility": new CSSProperty({
		key: "backfaceVisibility",
		syntax: "(visible)|(hidden)|(initial)|(inherit)",
		initial: "visible",
		values: ["visible", "hidden", "initial", "inherit"],
	}),
	background: new CSSProperty({
		key: "background",
		syntax: "(([prop:background-color]) ([prop:background-image]) ((([prop:background-position])|([prop:background-size]))) ([prop:background-repeat]) ([prop:background-origin]) ([prop:background-clip]) ([prop:background-attachment]))|(initial)|(inherit)",
		initial: "see individual properties",
		values: [
			"[prop:background-color]",
			"[prop:background-image]",
			"[prop:background-position]",
			"[prop:background-size]",
			"[prop:background-repeat]",
			"[prop:background-origin]",
			"[prop:background-clip]",
			"[prop:background-attachment]",
			PROPERTY_TYPE.PREDEFINED_COLOR,
			PROPERTY_TYPE.HEX,
			"initial",
			"inherit",
		],
	}),
	"background-attachment": new CSSProperty({
		key: "backgroundAttachment",
		syntax: "(scroll)|(fixed)|(local)|(initial)|(inherit)",
		initial: "scroll",
		values: ["scroll", "fixed", "local", "initial", "inherit"],
	}),
	"background-blend-mode": new CSSProperty({
		key: "backgroundBlendMode",
		syntax: "(normal)|(multiply)|(screen)|(overlay)|(darken)|(lighten)|(color-dodge)|(saturation)|([color])|(luminosity)",
		initial: "normal",
		values: [
			"normal",
			"multiply",
			"screen",
			"overlay",
			"darken",
			"lighten",
			"color-dodge",
			"saturation",
			"[color]",
			"luminosity",
		],
	}),
	"background-clip": new CSSProperty({
		key: "backgroundClip",
		syntax: "(border-box)|(padding-box)|(content-box)|(initial)|(inherit)",
		initial: "border-box",
		values: [
			"border-box",
			"padding-box",
			"content-box",
			"initial",
			"inherit",
		],
	}),
	"background-color": new CSSProperty({
		key: "backgroundColor",
		syntax: "([color])|(transparent)|(initial)|(inherit)",
		initial: "transparent",
		values: ["[color]", "transparent", "initial", "inherit"],
	}),
	"background-image": new CSSProperty({
		key: "backgroundImage",
		syntax: "([fn:url])|([fn:linear-gradient])|([fn:radial-gradient])|([fn:repeating-linear-gradient])|([fn:repeating-radial-gradient])|(none)|(initial)|(inherit)",
		initial: "none",
		values: [
			"[fn:url]",
			"none",
			"[fn:linear-gradient]",
			"[fn:radial-gradient]",
			"[fn:repeating-linear-gradient]",
			"[fn:repeating-radial-gradient]",
			"initial",
			"inherit",
		],
	}),
	"background-origin": new CSSProperty({
		key: "backgroundOrigin",
		syntax: "(padding-box)|(border-box)|(content-box)|(initial)|(inherit)",
		initial: "padding-box",
		values: [
			"padding-box",
			"border-box",
			"content-box",
			"initial",
			"inherit",
		],
	}),
	"background-position": new CSSProperty({
		key: "backgroundPosition",
		syntax: "(left top)|(left center)|(left bottom)|(right top)|(right center)|(right bottom)|(center top)|(center center)|(center bottom)|([percent])new CSSProperty({2,2})|([length])new CSSProperty({2,2})|(initial)|(inherit)",
		initial: "0% 0%",
		values: [
			"left top",
			"left center",
			"left bottom",
			"right top",
			"right center",
			"right bottom",
			"center top",
			"center center",
			"center bottom",
			"([percent])new CSSProperty({2,2})",
			"([length])new CSSProperty({2,2})",
			"initial",
			"inherit",
		],
	}),
	"background-repeat": new CSSProperty({
		key: "backgroundRepeat",
		syntax: "(repeat)|(repeat-x)|(repeat-y)|(no-repeat)|(initial)|(inherit)",
		initial: "repeat",
		values: [
			"repeat",
			"repeat-x",
			"repeat-y",
			"no-repeat",
			"space",
			"round",
			"initial",
			"inherit",
		],
	}),
	"background-size": new CSSProperty({
		key: "backgroundSize",
		syntax: "(auto)|([length])|(cover)|(contain)|(initial)|(inherit)",
		initial: "auto",
		values: [
			"auto",
			"[length]",
			"percentage",
			"cover",
			"contain",
			"initial",
			"inherit",
		],
	}),
	border: new CSSProperty({
		key: "border",
		syntax: "(([prop:border-width]) ([prop:border-style]) ([prop:border-color]))|(initial)|(inherit)",
		initial: "medium none color",
		values: [
			"[prop:border-width]",
			"[prop:border-style]",
			"[prop:border-color]",
			"initial",
			"inherit",
		],
	}),
	"border-bottom": new CSSProperty({
		key: "borderBottom",
		syntax: "([prop:border-bottom-width]) ([prop:border-bottom-style]) ([prop:border-bottom-color])|(initial)|(inherit)",
		initial: "medium none color",
		values: [
			"[prop:border-bottom-width]",
			"[prop:border-bottom-style]",
			"[prop:border-bottom-color]",
			"initial",
			"inherit",
		],
	}),
	"border-bottom-color": new CSSProperty({
		key: "borderBottomColor",
		syntax: "([color])|(transparent)|(initial)|(inherit)",
		initial: "The current color of the element",
		values: ["[color]", "transparent", "initial", "inherit"],
	}),
	"border-bottom-left-radius": new CSSProperty({
		key: "borderBottomLeftRadius",
		syntax: "(([length])|([percent]))new CSSProperty({1,2})|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"border-bottom-right-radius": new CSSProperty({
		key: "borderBottomRightRadius",
		syntax: "(([length])|([percent]))new CSSProperty({1,2})|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"border-bottom-style": new CSSProperty({
		key: "borderBottomStyle",
		syntax: "(none)|(hidden)|(dotted)|(dashed)|(solid)|(double)|(groove)|(ridge)|(inset)|(outset)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"hidden",
			"dotted",
			"dashed",
			"solid",
			"double",
			"groove",
			"ridge",
			"inset",
			"outset",
			"initial",
			"inherit",
		],
	}),
	"border-bottom-width": new CSSProperty({
		key: "borderBottomWidth",
		syntax: "(medium)|(thin)|(thick)|([length])|(initial)|(inherit)",
		initial: "medium",
		values: ["medium", "thin", "thick", "[length]", "initial", "inherit"],
	}),
	"border-collapse": new CSSProperty({
		key: "borderCollapse",
		syntax: "(separate)|(collapse)|(initial)|(inherit)",
		initial: "separate",
		values: ["separate", "collapse", "initial", "inherit"],
	}),
	"border-color": new CSSProperty({
		key: "borderColor",
		syntax: "([color])|(transparent)|(initial)|(inherit)",
		initial: "The current color of the element",
		values: ["[color]", "transparent", "initial", "inherit"],
	}),
	"border-image": new CSSProperty({
		key: "borderImage",
		syntax: "(([prop:border-image-source]) ([prop:border-image-slice]) ([prop:border-image-width]) ([prop:border-image-outset]) ([prop:border-image-repeat]))|(initial)|(inherit)",
		initial: "none 100% 1 0 stretch",
		values: [
			"[prop:border-image-source]",
			"[prop:border-image-slice]",
			"[prop:border-image-width]",
			"[prop:border-image-outset]",
			"[prop:border-image-repeat]",
			"initial",
			"inherit",
		],
	}),
	"border-image-outset": new CSSProperty({
		key: "borderImageOutset",
		syntax: "([length])|([number])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[number]", "initial", "inherit"],
	}),
	"border-image-repeat": new CSSProperty({
		key: "borderImageRepeat",
		syntax: "(stretch)|(repeat)|(round)|(initial)|(inherit)",
		initial: "stretch",
		values: ["stretch", "repeat", "round", "space", "initial", "inherit"],
	}),
	"border-image-slice": new CSSProperty({
		key: "borderImageSlice",
		syntax: "([number])|([percent])|(fill)|(initial)|(inherit)",
		initial: "100%",
		values: ["[number]", "[percent]", "fill", "initial", "inherit"],
	}),
	"border-image-source": new CSSProperty({
		key: "borderImageSource",
		syntax: "(none)|(image)|(initial)|(inherit)",
		initial: "none",
		values: ["none", "image", "initial", "inherit"],
	}),
	"border-image-width": new CSSProperty({
		key: "borderImageWidth",
		syntax: "([number])|([percent])|(auto)|(initial)|(inherit)",
		initial: "1",
		values: [
			"[length]",
			"[number]",
			"[percent]",
			"auto",
			"initial",
			"inherit",
		],
	}),
	"border-left": new CSSProperty({
		key: "borderLeft",
		syntax: "(([prop:border-left-width]) ([prop:border-left-style]) ([prop:border-left-color]))|(initial)|(inherit)",
		initial: "medium none color",
		values: [
			"[prop:border-left-width]",
			"[prop:border-left-style]",
			"[prop:border-left-color]",
			"initial",
			"inherit",
		],
	}),
	"border-left-color": new CSSProperty({
		key: "borderLeftColor",
		syntax: "([color])|(transparent)|(initial)|(inherit)",
		initial: "The current color of the element",
		values: ["[color]", "transparent", "initial", "inherit"],
	}),
	"border-left-style": new CSSProperty({
		key: "borderLeftStyle",
		syntax: "(none)|(hidden)|(dotted)|(dashed)|(solid)|(double)|(groove)|(ridge)|(inset)|(outset)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"hidden",
			"dotted",
			"dashed",
			"solid",
			"double",
			"groove",
			"ridge",
			"inset",
			"outset",
			"initial",
			"inherit",
		],
	}),
	"border-left-width": new CSSProperty({
		key: "borderLeftWidth",
		syntax: "(medium)|(thin)|(thick)|([length])|(initial)|(inherit)",
		initial: "medium",
		values: ["medium", "thin", "thick", "[length]", "initial", "inherit"],
	}),
	"border-radius": new CSSProperty({
		key: "borderRadius",
		syntax: "(([length])|[percent])new CSSProperty({1:4})|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"border-right": new CSSProperty({
		key: "borderRight",
		syntax: "(([prop:border-width]) ([prop:border-style]) ([prop:border-color]))|(initial)|(inherit)",
		initial: "medium none color",
		values: [
			"[prop:border-right-width]",
			"[prop:border-right-style]",
			"[prop:border-right-color]",
			"initial",
			"inherit",
		],
	}),
	"border-right-color": new CSSProperty({
		key: "borderRightColor",
		syntax: "([color])|(transparent)|(initial)|(inherit)",
		initial: "black",
		values: ["[color]", "transparent", "initial", "inherit"],
	}),
	"border-right-style": new CSSProperty({
		key: "borderRightStyle",
		syntax: "(none)|(hidden)|(dotted)|(dashed)|(solid)|(double)|(groove)|(ridge)|(inset)|(outset)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"hidden",
			"dotted",
			"dashed",
			"solid",
			"double",
			"groove",
			"ridge",
			"inset",
			"outset",
			"initial",
			"inherit",
		],
	}),
	"border-right-width": new CSSProperty({
		key: "borderRightWidth",
		syntax: "(medium)|(thin)|(thick)|([length])|(initial)|(inherit)",
		initial: "medium",
		values: ["medium", "thin", "thick", "[length]", "initial", "inherit"],
	}),
	"border-spacing": new CSSProperty({
		key: "borderSpacing",
		syntax: "([length])new CSSProperty({1,2})|(initial)|(inherit)",
		initial: "2px",
		values: ["[length]", "initial", "inherit"],
	}),
	"border-style": new CSSProperty({
		key: "borderStyle",
		syntax: "(none)|(hidden)|(dotted)|(dashed)|(solid)|(double)|(groove)|(ridge)|(inset)|(outset)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"hidden",
			"dotted",
			"dashed",
			"solid",
			"double",
			"groove",
			"ridge",
			"inset",
			"outset",
			"initial",
			"inherit",
		],
	}),
	"border-top": new CSSProperty({
		key: "borderTop",
		syntax: "(([prop:border-left-width]) ([prop:border-left-style]) ([prop:border-left-color]))|(initial)|(inherit)",
		initial: "medium none color",
		values: [
			"[prop:border-top-width]",
			"[prop:border-top-style]",
			"[prop:border-top-color]",
			"initial",
			"inherit",
		],
	}),
	"border-top-color": new CSSProperty({
		key: "borderTopColor",
		syntax: "([color])|(transparent)|(initial)|(inherit)",
		initial: "The current color of the element",
		values: ["[color]", "transparent", "initial", "inherit"],
	}),
	"border-top-left-radius": new CSSProperty({
		key: "borderTopLeftRadius",
		syntax: "(([length])|[percent])new CSSProperty({1,2})|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"border-top-right-radius": new CSSProperty({
		key: "borderTopRightRadius",
		syntax: "(([length])|[percent])new CSSProperty({1,2})|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"border-top-style": new CSSProperty({
		key: "borderTopStyle",
		syntax: "(none)|(hidden)|(dotted)|(dashed)|(solid)|(double)|(groove)|(ridge)|(inset)|(outset)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"hidden",
			"dotted",
			"dashed",
			"solid",
			"double",
			"groove",
			"ridge",
			"inset",
			"outset",
			"initial",
			"inherit",
		],
	}),
	"border-top-width": new CSSProperty({
		key: "borderTopWidth",
		syntax: "(medium)|(thin)|(thick)|([length])|(initial)|(inherit)",
		initial: "medium",
		values: ["medium", "thin", "thick", "[length]", "initial", "inherit"],
	}),
	"border-width": new CSSProperty({
		key: "borderWidth",
		syntax: "(medium)|(thin)|(thick)|([length])|(initial)|(inherit)",
		initial: "medium",
		values: ["medium", "thin", "thick", "[length]", "initial", "inherit"],
	}),
	bottom: new CSSProperty({
		key: "bottom",
		syntax: "(auto)|([length])|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "[length]", "[percent]", "initial", "inherit"],
	}),
	"box-decoration-break": new CSSProperty({
		key: "boxDecorationBreak",
		syntax: "(slice)|(clone)|(initial)|(inherit)|(unset)",
		initial: "slice",
		values: ["slice", "clone", "initial", "inherit"],
	}),
	"box-shadow": new CSSProperty({
		key: "boxShadow",
		syntax: "(none)|(h-offset) v-offset blur spread color |(inset)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"h-offset",
			"v-offset",
			"blur",
			"spread",
			"[color]",
			"inset",
			"initial",
			"inherit",
		],
	}),
	"box-sizing": new CSSProperty({
		key: "boxSizing",
		syntax: "(content-box)|(border-box)|(initial)|(inherit)",
		initial: "content-box",
		values: ["content-box", "border-box", "initial", "inherit"],
	}),
	"caption-side": new CSSProperty({
		key: "captionSide",
		syntax: "(top)|(bottom)|(initial)|(inherit)",
		initial: "top",
		values: ["top", "bottom", "initial", "inherit"],
	}),
	"caret-color": new CSSProperty({
		key: "caretColor",
		syntax: "(auto)|([color])",
		initial: "auto",
		values: ["auto", "[color]"],
	}),
	"@charset": new CSSProperty({
		key: "@charset",
		syntax: '@charset "charset"',
		initial: "charset",
		values: ["charset"],
	}),
	clear: new CSSProperty({
		key: "clear",
		syntax: "(none)|(left)|(right)|(both)|(initial)|(inherit)",
		initial: "none",
		values: ["none", "left", "right", "both", "initial", "inherit"],
	}),
	clip: new CSSProperty({
		key: "clip",
		syntax: "(auto)|(shape)|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "shape", "initial", "inherit"],
	}),
	color: new CSSProperty({
		key: "color",
		syntax: "([color])|(initial)|(inherit)",
		initial: "not specified",
		values: ["[color]", "initial", "inherit"],
	}),
	"column-count": new CSSProperty({
		key: "columnCount",
		syntax: "([number])|(auto)|(initial)|(inherit)",
		initial: "auto",
		values: ["[number]", "auto", "initial", "inherit"],
	}),
	"column-fill": new CSSProperty({
		key: "columnFill",
		syntax: "(balance)|(auto)|(initial)|(inherit)",
		initial: "balance",
		values: ["balance", "auto", "initial", "inherit"],
	}),
	"column-gap": new CSSProperty({
		key: "columnGap",
		syntax: "([length])|(normal)|(initial)|(inherit)",
		initial: "normal",
		values: ["[length]", "normal", "initial", "inherit"],
	}),
	"column-rule": new CSSProperty({
		key: "columnRule",
		syntax: "(([prop:column-rule-width]) ([prop:column-rule-style]) ([prop:column-rule-color]))|(initial)|(inherit)",
		initial: "medium none color",
		values: [
			"[prop:column-rule-width]",
			"[prop:column-rule-style]",
			"[prop:column-rule-color]",
			"initial",
			"inherit",
		],
	}),
	"column-rule-color": new CSSProperty({
		key: "columnRuleColor",
		syntax: "([color])|(initial)|(inherit)",
		initial: "The current color of the element",
		values: ["[color]", "initial", "inherit"],
	}),
	"column-rule-style": new CSSProperty({
		key: "columnRuleStyle",
		syntax: "(none)|(hidden)|(dotted)|(dashed)|(solid)|(double)|(groove)|(ridge)|(inset)|(outset)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"hidden",
			"dotted",
			"dashed",
			"solid",
			"double",
			"groove",
			"ridge",
			"inset",
			"outset",
			"initial",
			"inherit",
		],
	}),
	"column-rule-width": new CSSProperty({
		key: "columnRuleWidth",
		syntax: "(medium)|(thin)|(thick)|([length])|(initial)|(inherit)",
		initial: "medium",
		values: ["medium", "thin", "thick", "[length]", "initial", "inherit"],
	}),
	"column-span": new CSSProperty({
		key: "columnSpan",
		syntax: "(none)|(all)|(initial)|(inherit)",
		initial: "none",
		values: ["none", "all", "initial", "inherit"],
	}),
	"column-width": new CSSProperty({
		key: "columnWidth",
		syntax: "(auto)|([length])|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "[length]", "initial", "inherit"],
	}),
	columns: new CSSProperty({
		key: "columns",
		syntax: "(auto)|(([prop:column-width]) ([prop:column-count]))|(initial)|(inherit)",
		initial: "auto auto",
		values: [
			"auto",
			"[prop:column-width]",
			"[prop:column-count]",
			"initial",
			"inherit",
		],
	}),
	content: new CSSProperty({
		key: "content",
		syntax: "(normal)|(none)|(counter)|(attr)|(string)|(open-quote)|(close-quote)|(no-open-quote)|(no-close-quote)|(url)|(initial)|(inherit)",
		initial: "normal",
		values: [
			"normal",
			"none",
			"counter",
			"attr(attribute)",
			"string",
			"open-quote",
			"close-quote",
			"no-open-quote",
			"no-close-quote",
			"url(url)",
			"initial",
			"inherit",
		],
	}),
	"counter-increment": new CSSProperty({
		key: "counterIncrement",
		syntax: "(none)|([number])|(initial)|(inherit)",
		initial: "none",
		values: ["none", "[number]", "initial", "inherit"],
	}),
	"counter-reset": new CSSProperty({
		key: "counterReset",
		syntax: "(none)|([number])|(initial)|(inherit)",
		initial: "none",
		values: ["none", "[number]", "initial", "inherit"],
	}),
	cursor: new CSSProperty({
		key: "cursor",
		syntax: "(alias)|(all-scroll)|(auto)|(cell)|(context-menu)|(col-resize)|(copy)|(crosshair)|(default)|(e-resize)|(ew-resize)|(grab)|(grabbing)|(help)|(move)|(n-resize)|(ne-resize)|(nesw-resize)|(ns-resize)|(nw-resize)|(nwse-resize)|(no-drop)|(none)|(not-allowed)|(pointer)|(progress)|(row-resize)|(s-resize)|(se-resize)|(sw-resize)|(text)|(URL)|(vertical-text)|(w-resize)|(wait)|(zoom-in)|(zoom-out)|(initial)|(inherit)",
		initial: "auto",
		values: [
			"alias",
			"all-scroll",
			"auto",
			"cell",
			"context-menu",
			"col-resize",
			"copy",
			"crosshair",
			"default",
			"e-resize",
			"ew-resize",
			"grab",
			"grabbing",
			"help",
			"move",
			"n-resize",
			"ne-resize",
			"nesw-resize",
			"ns-resize",
			"nw-resize",
			"nwse-resize",
			"no-drop",
			"none",
			"not-allowed",
			"pointer",
			"progress",
			"row-resize",
			"s-resize",
			"se-resize",
			"sw-resize",
			"text",
			"URL",
			"vertical-text",
			"w-resize",
			"wait",
			"zoom-in",
			"zoom-out",
			"initial",
			"inherit",
		],
	}),
	direction: new CSSProperty({
		key: "direction",
		syntax: "(ltr)|(rtl)|(initial)|(inherit)",
		initial: "ltr",
		values: ["ltr", "rtl", "initial", "inherit"],
	}),
	display: new CSSProperty({
		key: "display",
		syntax: "(inline)|(block)|(contents)|(flex)|(grid)|(inline-block)|(inline-flex)|(inline-grid)|(inline-table)|(list-item)|(run-in)|(table)|(table-caption)|(table-column-group)|(table-header-group)|(table-footer-group)|(table-row-group)|(table-cell)|(table-column)|(table-row)|(none)|(initial)|(inherit)",
		initial: "",
		values: [
			"inline",
			"block",
			"contents",
			"flex",
			"grid",
			"inline-block",
			"inline-flex",
			"inline-grid",
			"inline-table",
			"list-item",
			"run-in",
			"table",
			"table-caption",
			"table-column-group",
			"table-header-group",
			"table-footer-group",
			"table-row-group",
			"table-cell",
			"table-column",
			"table-row",
			"none",
			"initial",
			"inherit",
		],
	}),
	"empty-cells": new CSSProperty({
		key: "emptyCells",
		syntax: "(show)|(hide)|(initial)|(inherit)",
		initial: "show",
		values: ["show", "hide", "initial", "inherit"],
	}),
	filter: new CSSProperty({
		key: "filter",
		syntax: "(none)|([fn:blur])|([fn:brightness])|([fn:contrast])|([fn:drop-shadow])|([fn:grayscale])|([fn:hue-rotate])|([fn:invert])|([fn:opacity])|([fn:saturate])|([fn:sepia])|([fn:url])",
		initial: "none",
		values: [
			"none",
			"[fn:blur]",
			"[fn:brightness]",
			"[fn:contrast]",
			"[fn:drop-shadow]",
			"[fn:grayscale]",
			"[fn:hue-rotate]",
			"[fn:invert]",
			"[fn:opacity]",
			"[fn:saturate]",
			"[fn:sepia]",
			"[fn:url]",
			"initial",
			"inherit",
		],
	}),
	flex: new CSSProperty({
		key: "flex",
		syntax: "(([prop:flex-grow]) ([prop:flex-shrink]) ([prop:flex-basis]))|(auto)|(initial)|(inherit)",
		initial: "0 1 auto",
		values: [
			"[prop:flex-grow]",
			"[prop:flex-shrink]",
			"[prop:flex-basis]",
			"auto",
			"initial",
			"none",
			"inherit",
		],
	}),
	"flex-basis": new CSSProperty({
		key: "flexBasis",
		syntax: "([number])|(auto)|(initial)|(inherit)",
		initial: "auto",
		values: ["[number]", "auto", "initial", "inherit"],
	}),
	"flex-direction": new CSSProperty({
		key: "flexDirection",
		syntax: "(row)|(row-reverse)|(column)|(column-reverse)|(initial)|(inherit)",
		initial: "row",
		values: [
			"row",
			"row-reverse",
			"column",
			"column-reverse",
			"initial",
			"inherit",
		],
	}),
	"flex-flow": new CSSProperty({
		key: "flexFlow",
		syntax: "flex-direction (flex-wrap)|(initial)|(inherit)",
		initial: "row nowrap",
		values: ["flex-direction", "flex-wrap", "initial", "inherit"],
	}),
	"flex-grow": new CSSProperty({
		key: "flexGrow",
		syntax: "([number])|(initial)|(inherit)",
		initial: "0",
		values: ["[number]", "initial", "inherit"],
	}),
	"flex-shrink": new CSSProperty({
		key: "flexShrink",
		syntax: "([number])|(initial)|(inherit)",
		initial: "1",
		values: ["[number]", "initial", "inherit"],
	}),
	"flex-wrap": new CSSProperty({
		key: "flexWrap",
		syntax: "(nowrap)|(wrap)|(wrap-reverse)|(initial)|(inherit)",
		initial: "nowrap",
		values: ["nowrap", "wrap", "wrap-reverse", "initial", "inherit"],
	}),
	float: new CSSProperty({
		key: "float",
		syntax: "(none)|(left)|(right)|(initial)|(inherit)",
		initial: "none",
		values: ["none", "left", "right", "initial", "inherit"],
	}),
	font: new CSSProperty({
		key: "font",
		syntax: "font-style font-variant font-weight font-size/line-height (font-family)|(caption)|(icon)|(menu)|(message-box)|(small-caption)|(status-bar)|(initial)|(inherit)",
		initial: "The default value of the font properties",
		values: [
			"[prop:font-style]",
			"[prop:font-variant]",
			"[prop:font-weight]",
			"[prop:font-size/line-height]",
			"[prop:font-family]",
			"caption",
			"icon",
			"menu",
			"message-box",
			"small-caption",
			"status-bar",
			"initial",
			"inherit",
		],
	}),
	"font-family": new CSSProperty({
		key: "fontFamily",
		syntax: "([family-name])|([generic-family])|(initial)|(inherit)",
		initial: "depends on the browser",
		values: ["[family-name]", "[generic-family]", "initial", "inherit"],
	}),
	"font-kerning": new CSSProperty({
		key: "fontKerning",
		syntax: "(auto)|(normal)|(none)",
		initial: "auto",
		values: ["auto", "normal", "none"],
	}),
	"font-size": new CSSProperty({
		key: "fontSize",
		syntax: "([length])|([percent])|(medium)|(xx-small)|(x-small)|(small)|(large)|(x-large)|(xx-large)|(smaller)|(larger)|([length])|(initial)|(inherit)",
		initial: "medium",
		values: [
			"medium",
			"xx-small",
			"x-small",
			"small",
			"large",
			"x-large",
			"xx-large",
			"smaller",
			"larger",
			"[length]",
			"[percent]",
			"initial",
			"inherit",
		],
	}),
	"font-size-adjust": new CSSProperty({
		key: "fontSizeAdjust",
		syntax: "([number])|(none)|(initial)|(inherit)",
		initial: "none",
		values: ["[number]", "none", "initial", "inherit"],
	}),
	"font-stretch": new CSSProperty({
		key: "fontStretch",
		syntax: "(ultra-condensed)|(extra-condensed)|(condensed)|(semi-condensed)|(normal)|(semi-expanded)|(expanded)|(extra-expanded)|(ultra-expanded)|(initial)|(inherit)",
		initial: "normal",
		values: [
			"ultra-condensed",
			"extra-condensed",
			"condensed",
			"semi-condensed",
			"normal",
			"semi-expanded",
			"expanded",
			"extra-expanded",
			"ultra-expanded",
			"initial",
			"inherit",
		],
	}),
	"font-style": new CSSProperty({
		key: "fontStyle",
		syntax: "(normal)|(italic)|(oblique)|(initial)|(inherit)",
		initial: "normal",
		values: ["normal", "italic", "oblique", "initial", "inherit"],
	}),
	"font-variant": new CSSProperty({
		key: "fontVariant",
		syntax: "(normal)|(small-caps)|(initial)|(inherit)",
		initial: "normal",
		values: ["normal", "small-caps", "initial", "inherit"],
	}),
	"font-weight": new CSSProperty({
		key: "fontWeight",
		syntax: "(normal)|(bold)|(bolder)|(lighter)|([number])|(initial)|(inherit)",
		initial: "normal",
		values: [
			"normal",
			"bold",
			"bolder",
			"lighter",
			"100",
			"200",
			"300",
			"400",
			"500",
			"600",
			"700",
			"800",
			"900",
			"initial",
			"inherit",
		],
	}),
	grid: new CSSProperty({
		key: "grid",
		syntax: "(none)|(grid-template-rows) / (grid-template-columns)|(grid-template-areas)|(grid-template-rows) / [grid-auto-flow] (grid-auto-columns)|[grid-auto-flow] grid-auto-rows / (grid-template-columns)|(initial)|(inherit)",
		initial: "none none none auto auto row",
		values: [
			"none",
			"grid-template rows / grid-template-columns",
			"grid-template-areas",
			"grid-template rows / grid-auto-columns",
			"grid-auto-rows / grid-template-columns",
			"grid-template rows / grid-auto-flow grid-auto-columns",
			"grid-auto flow grid-auto-rows / grid-template-columns",
			"initial",
			"inherit",
		],
	}),
	"grid-area": new CSSProperty({
		key: "gridArea",
		syntax: "(([prop:grid-row-start]) / ([prop:grid-column-start]) / ([prop:grid-row-end]) / ([prop:grid-row-end]))|([label])",
		initial: "auto / auto / auto / auto",
		values: [
			"[prop:grid-row-start]",
			"[prop:grid-column-start]",
			"[prop:grid-row-end]",
			"[prop:grid-column-end]",
			"[label]",
		],
	}),
	"grid-auto-columns": new CSSProperty({
		key: "gridAutoColumns",
		syntax: "(auto)|(max-content)|(min-content)|([length])|([percent])|([fn:fit-content])|([fn:minmax])",
		initial: "auto",
		values: [
			"auto",
			"[fn:fit-content]",
			"max-content",
			"min-content",
			"[fn:minmax]",
			"[length]",
			"[percent]",
		],
	}),
	"grid-auto-flow": new CSSProperty({
		key: "gridAutoFlow",
		syntax: "(row)|(column)|(dense)|(row dense)|(column dense)",
		initial: "row",
		values: ["row", "column", "dense", "row dense", "column dense"],
	}),
	"grid-auto-rows": new CSSProperty({
		key: "gridAutoRows",
		syntax: "(auto)|(max-content)|(min-content)|([length])",
		initial: "auto",
		values: ["auto", "max-content", "min-content", "[length]"],
	}),
	"grid-column": new CSSProperty({
		key: "gridColumn",
		syntax: "grid-column-start / grid-column-end",
		initial: "auto / auto",
		values: ["[prop:grid-column-start]", "[prop:grid-column-end]"],
	}),
	"grid-column-end": new CSSProperty({
		key: "gridColumnEnd",
		syntax: "(auto)|((span) ([number]))|(column-line)",
		initial: "auto",
		values: ["auto", "(span) ([number])", "column-line"],
	}),
	"grid-column-gap": new CSSProperty({
		key: "gridColumnGap",
		syntax: "[length]",
		initial: "0",
		values: ["[length]"],
	}),
	"grid-column-start": new CSSProperty({
		key: "gridColumnStart",
		syntax: "(auto)|((span) ([number]))|(column-line)",
		initial: "auto",
		values: ["auto", "(span) ([number])", "column-line"],
	}),
	"grid-gap": new CSSProperty({
		key: "gridGap",
		syntax: "([prop:grid-row-gap]) ([prop:grid-column-gap])",
		initial: "0 0",
		values: ["[prop:grid-row-gap]", "[prop:grid-column-gap]"],
	}),
	"grid-row": new CSSProperty({
		key: "gridRow",
		syntax: "([prop:grid-row-start]) / ([prop:grid-row-end])",
		initial: "auto / auto",
		values: ["[prop:grid-row-start]", "[prop:grid-row-end]"],
	}),
	"grid-row-end": new CSSProperty({
		key: "gridRowEnd",
		syntax: "(auto)|(row-line)|((span) ([number]))|(column-line)",
		initial: "auto",
		values: ["auto", "(span) ([number])", "column-line"],
	}),
	"grid-row-gap": new CSSProperty({
		key: "gridRowGap",
		syntax: "[length]",
		initial: "0",
		values: ["[length]"],
	}),
	"grid-row-start": new CSSProperty({
		key: "gridRowStart",
		syntax: "(auto)|(row-line)",
		initial: "auto",
		values: ["auto", "row-line"],
	}),
	"grid-template": new CSSProperty({
		key: "gridTemplate",
		syntax: "(none)|(grid-template-rows) / (grid-template-columns)|(grid-template-areas)|(initial)|(inherit)",
		initial: "none none none",
		values: [
			"none",
			"grid-template rows / grid-template-columns",
			"grid-template-areas",
			"initial",
			"inherit",
		],
	}),
	"grid-template-areas": new CSSProperty({
		key: "gridTemplateAreas",
		syntax: "(none)|(itemnames)",
		initial: "none",
		values: ["none", "itemnames"],
	}),
	"grid-template-columns": new CSSProperty({
		key: "gridTemplateColumns",
		syntax: "(none)|(auto)|(max-content)|(min-content)|([length])|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"auto",
			"max-content",
			"min-content",
			"[length]",
			"initial",
			"inherit",
		],
	}),
	"grid-template-rows": new CSSProperty({
		key: "gridTemplateRows",
		syntax: "(none)|(auto)|(max-content)|(min-content)|([length])|(initial)|(inherit)",
		initial: "none",
		values: ["none", "auto", "max-content", "min-content", "[length]"],
	}),
	"hanging-punctuation": new CSSProperty({
		key: "hangingPunctuation",
		syntax: "(none)|(first)|(last)|(allow-end)|(force-end)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"first",
			"last",
			"allow-end",
			"force-end",
			"initial",
			"inherit",
		],
	}),
	height: new CSSProperty({
		key: "height",
		syntax: "(auto)|([length])|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "[length]", "[percent]", "initial", "inherit"],
	}),
	hyphens: new CSSProperty({
		key: "hyphens",
		syntax: "(none)|(manual)|(auto)|(initial)|(inherit)",
		initial: "manual",
		values: ["none", "manual", "auto", "initial", "inherit"],
	}),
	isolation: new CSSProperty({
		key: "isolation",
		syntax: "(auto)|(isolate)|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "isolate", "initial", "inherit"],
	}),
	"justify-content": new CSSProperty({
		key: "justifyContent",
		syntax: "(flex-start)|(flex-end)|(center)|(space-between)|(space-around)|(initial)|(inherit)",
		initial: "flex-start",
		values: [
			"flex-start",
			"flex-end",
			"center",
			"space-between",
			"space-around",
			"initial",
			"inherit",
		],
	}),
	left: new CSSProperty({
		key: "left",
		syntax: "(auto)|([length])|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "[length]", "[percent]", "initial", "inherit"],
	}),
	"letter-spacing": new CSSProperty({
		key: "letterSpacing",
		syntax: "(normal)|([length])|(initial)|(inherit)",
		initial: "normal",
		values: ["normal", "[length]", "initial", "inherit"],
	}),
	"line-height": new CSSProperty({
		key: "lineHeight",
		syntax: "(normal)|([number])|([length])|(initial)|(inherit)",
		initial: "normal",
		values: [
			"normal",
			"[number]",
			"[length]",
			"[percent]",
			"initial",
			"inherit",
		],
	}),
	"list-style": new CSSProperty({
		key: "listStyle",
		syntax: "(([prop:list-style-type]) ([prop:list-style-position]) ([prop:list-style-image]))|(initial)|(inherit)",
		initial: "disc outside none",
		values: [
			"[prop:list-style-type]",
			"[prop:list-style-position]",
			"[prop:list-style-image]",
			"initial",
			"inherit",
		],
	}),
	"list-style-image": new CSSProperty({
		key: "listStyleImage",
		syntax: "(none)|(url)|(initial)|(inherit)",
		initial: "none",
		values: ["none", "url", "initial", "inherit"],
	}),
	"list-style-position": new CSSProperty({
		key: "listStylePosition",
		syntax: "(inside)|(outside)|(initial)|(inherit)",
		initial: "outside",
		values: ["inside", "outside", "initial", "inherit"],
	}),
	"list-style-type": new CSSProperty({
		key: "listStyleType",
		syntax: "(disc)|(armenian)|(circle)|(cjk-ideographic)|(decimal)|(decimal-leading-zero)|(georgian)|(hebrew)|(hiragana)|(hiragana-iroha)|(katakana)|(katakana-iroha)|(lower-alpha)|(lower-greek)|(lower-latin)|(lower-roman)|(none)|(square)|(upper-alpha)|(upper-greek)|(upper-latin)|(upper-roman)|(initial)|(inherit)",
		initial: "disc",
		values: [
			"disc",
			"armenian",
			"circle",
			"cjk-ideographic",
			"decimal",
			"decimal-leading-zero",
			"georgian",
			"hebrew",
			"hiragana",
			"hiragana-iroha",
			"katakana",
			"katakana-iroha",
			"lower-alpha",
			"lower-greek",
			"lower-latin",
			"lower-roman",
			"none",
			"square",
			"upper-alpha",
			"upper-greek",
			"upper-latin",
			"upper-roman",
			"initial",
			"inherit",
		],
	}),
	margin: new CSSProperty({
		key: "margin",
		syntax: "(([length])|([percent]))new CSSProperty({1,4})|(auto)|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "auto", "initial", "inherit"],
	}),
	"margin-bottom": new CSSProperty({
		key: "marginBottom",
		syntax: "([length])|([percent])|(auto)|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "auto", "initial", "inherit"],
	}),
	"margin-left": new CSSProperty({
		key: "marginLeft",
		syntax: "([length])|([percent])|(auto)|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "auto", "initial", "inherit"],
	}),
	"margin-right": new CSSProperty({
		key: "marginRight",
		syntax: "([length])|([percent])|(auto)|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "auto", "initial", "inherit"],
	}),
	"margin-top": new CSSProperty({
		key: "marginTop",
		syntax: "([length])|(auto)|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "auto", "initial", "inherit"],
	}),
	"max-height": new CSSProperty({
		key: "maxHeight",
		syntax: "(none)|([length])|(initial)|(inherit)",
		initial: "none",
		values: ["none", "[length]", "[percent]", "initial", "inherit"],
	}),
	"max-width": new CSSProperty({
		key: "maxWidth",
		syntax: "(none)|([length])|(initial)|(inherit)",
		initial: "none",
		values: ["none", "[length]", "[percent]", "initial", "inherit"],
	}),
	"min-height": new CSSProperty({
		key: "minHeight",
		syntax: "([length])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"min-width": new CSSProperty({
		key: "minWidth",
		syntax: "([length])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"mix-blend-mode": new CSSProperty({
		key: "mixBlendMode",
		syntax: "(normal)|(multiply)|(screen)|(overlay)|(darken)|(lighten)|(color-dodge)|(color-burn)|(difference)|(exclusion)|(hue)|(saturation)|([color])|(luminosity)",
		initial: "normal",
		values: [
			"normal",
			"multiply",
			"screen",
			"overlay",
			"darken",
			"lighten",
			"color-dodge",
			"color-burn",
			"difference",
			"exclusion",
			"hue",
			"saturation",
			"[color]",
			"luminosity",
		],
	}),
	"object-fit": new CSSProperty({
		key: "objectFit",
		syntax: "(fill)|(contain)|(cover)|(scale-down)|(none)|(initial)|(inherit)",
		initial: "",
		values: [
			"fill",
			"contain",
			"cover",
			"none",
			"scale-down",
			"initial",
			"inherit",
		],
	}),
	"object-position": new CSSProperty({
		key: "objectPosition",
		syntax: "(position)|(initial)|(inherit)",
		initial: "50% 50%",
		values: ["position", "initial", "inherit"],
	}),
	opacity: new CSSProperty({
		key: "opacity",
		syntax: "([number])|(initial)|(inherit)",
		initial: "1",
		values: ["[number]", "initial", "inherit"],
	}),
	order: new CSSProperty({
		key: "order",
		syntax: "([number])|(initial)|(inherit)",
		initial: "0",
		values: ["[number]", "initial", "inherit"],
	}),
	outline: new CSSProperty({
		key: "outline",
		syntax: "(([prop:outline-width]) ([prop:outline-style]) ([prop:outline-color]))|(initial)|(inherit)",
		initial: "medium invert color",
		values: [
			"[prop:outline-width]",
			"[prop:outline-style]",
			"[prop:outline-color]",
			"initial",
			"inherit",
		],
	}),
	"outline-color": new CSSProperty({
		key: "outlineColor",
		syntax: "(invert)|([color])|(initial)|(inherit)",
		initial: "invert",
		values: ["invert", "[color]", "initial", "inherit"],
	}),
	"outline-offset": new CSSProperty({
		key: "outlineOffset",
		syntax: "([length])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "initial", "inherit"],
	}),
	"outline-style": new CSSProperty({
		key: "outlineStyle",
		syntax: "(none)|(hidden)|(dotted)|(dashed)|(solid)|(double)|(groove)|(ridge)|(inset)|(outset)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"hidden",
			"dotted",
			"dashed",
			"solid",
			"double",
			"groove",
			"ridge",
			"inset",
			"outset",
			"initial",
			"inherit",
		],
	}),
	"outline-width": new CSSProperty({
		key: "outlineWidth",
		syntax: "(medium)|(thin)|(thick)|([length])|(initial)|(inherit)",
		initial: "medium",
		values: ["medium", "thin", "thick", "[length]", "initial", "inherit"],
	}),
	overflow: new CSSProperty({
		key: "overflow",
		syntax: "(visible)|(hidden)|(scroll)|(auto)|(initial)|(inherit)",
		initial: "visible",
		values: ["visible", "hidden", "scroll", "auto", "initial", "inherit"],
	}),
	"overflow-x": new CSSProperty({
		key: "overflowX",
		syntax: "(visible)|(hidden)|(scroll)|(auto)|(initial)|(inherit)",
		initial: "visible",
		values: ["visible", "hidden", "scroll", "auto", "initial", "inherit"],
	}),
	"overflow-y": new CSSProperty({
		key: "overflowY",
		syntax: "(visible)|(hidden)|(scroll)|(auto)|(initial)|(inherit)",
		initial: "visible",
		values: ["visible", "hidden", "scroll", "auto", "initial", "inherit"],
	}),
	padding: new CSSProperty({
		key: "padding",
		syntax: "(([length])|([percent]))new CSSProperty({1,4})|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"padding-bottom": new CSSProperty({
		key: "paddingBottom",
		syntax: "([length])|([percent])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"padding-left": new CSSProperty({
		key: "paddingLeft",
		syntax: "([length])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"padding-right": new CSSProperty({
		key: "paddingRight",
		syntax: "([length])|([percent])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"padding-top": new CSSProperty({
		key: "paddingTop",
		syntax: "([length])|([percent])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"page-break-after": new CSSProperty({
		key: "pageBreakAfter",
		syntax: "(auto)|(always)|(avoid)|(left)|(right)|(initial)|(inherit)",
		initial: "auto",
		values: [
			"auto",
			"always",
			"avoid",
			"left",
			"right",
			"initial",
			"inherit",
		],
	}),
	"page-break-before": new CSSProperty({
		key: "pageBreakBefore",
		syntax: "(auto)|(always)|(avoid)|(left)|(right)|(initial)|(inherit)",
		initial: "auto",
		values: [
			"auto",
			"always",
			"avoid",
			"left",
			"right",
			"initial",
			"inherit",
		],
	}),
	"page-break-inside": new CSSProperty({
		key: "pageBreakInside",
		syntax: "(auto)|(avoid)|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "avoid", "initial", "inherit"],
	}),
	perspective: new CSSProperty({
		key: "perspective",
		syntax: "([length])|(none)",
		initial: "none",
		values: ["[length]", "none", "initial", "inherit"],
	}),
	"perspective-origin": new CSSProperty({
		key: "perspectiveOrigin",
		syntax: "x-axis (y-axis)|(initial)|(inherit)",
		initial: "50% 50%",
		values: ["x-axis", "y-axis", "initial", "inherit"],
	}),
	"pointer-events": new CSSProperty({
		key: "pointerEvents",
		syntax: "(auto)|(none)",
		initial: "auto",
		values: ["auto", "none", "initial", "inherit"],
	}),
	position: new CSSProperty({
		key: "position",
		syntax: "(static)|(absolute)|(fixed)|(relative)|(sticky)|(initial)|(inherit)",
		initial: "static",
		values: [
			"static",
			"absolute",
			"fixed",
			"relative",
			"sticky",
			"initial",
			"inherit",
		],
	}),
	quotes: new CSSProperty({
		key: "quotes",
		syntax: "(none)|(string)|(initial)|(inherit)",
		initial: "not specified",
		values: [
			"none",
			"string string string string",
			"initial",
			"inherit",
			'"',
			"'",
			"\u2039",
			"\u203a",
			"\u00ab",
			"\u00bb",
			"\u2018",
			"\u2019",
			"\u201c",
			"\u201d",
			"\u201e",
		],
	}),
	resize: new CSSProperty({
		key: "resize",
		syntax: "(none)|(both)|(horizontal)|(vertical)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"both",
			"horizontal",
			"vertical",
			"initial",
			"inherit",
		],
	}),
	right: new CSSProperty({
		key: "right",
		syntax: "(auto)|([length])|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "[length]", "[percent]", "initial", "inherit"],
	}),
	"scroll-behavior": new CSSProperty({
		key: "scrollBehavior",
		syntax: "(auto)|(smooth)|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "smooth", "initial", "inherit"],
	}),
	"tab-size": new CSSProperty({
		key: "tabSize",
		syntax: "([number])|([length])|(initial)|(inherit)",
		initial: "8",
		values: ["[number]", "[length]", "initial", "inherit"],
	}),
	"table-layout": new CSSProperty({
		key: "tableLayout",
		syntax: "(auto)|(fixed)|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "fixed", "initial", "inherit"],
	}),
	"text-align": new CSSProperty({
		key: "textAlign",
		syntax: "(left)|(right)|(center)|(justify)|(initial)|(inherit)",
		initial: "left if direction is ltr, and right if direction is rtl",
		values: ["left", "right", "center", "justify", "initial", "inherit"],
	}),
	"text-align-last": new CSSProperty({
		key: "textAlignLast",
		syntax: "(auto)|(left)|(right)|(center)|(justify)|(start)|(end)|(initial)|(inherit)",
		initial: "auto",
		values: [
			"auto",
			"left",
			"right",
			"center",
			"justify",
			"start",
			"end",
			"initial",
			"inherit",
		],
	}),
	"text-decoration": new CSSProperty({
		key: "textDecoration",
		syntax: "(([prop:text-decoration-line]) ([prop:text-decoration-color]) ([prop:text-decoration-style]))|(initial)|(inherit)",
		initial: "none currentcolor solid",
		values: [
			"[prop:text-decoration-line]",
			"[prop:text-decoration-color]",
			"[prop:text-decoration-style]",
			"initial",
			"inherit",
		],
	}),
	"text-decoration-color": new CSSProperty({
		key: "textDecorationColor",
		syntax: "([color])|(initial)|(inherit)",
		initial: "currentColor",
		values: ["[color]", "initial", "inherit"],
	}),
	"text-decoration-line": new CSSProperty({
		key: "textDecorationLine",
		syntax: "(none)|(underline)|(overline)|(line-through)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"underline",
			"overline",
			"line-through",
			"initial",
			"inherit",
		],
	}),
	"text-decoration-style": new CSSProperty({
		key: "textDecorationStyle",
		syntax: "(solid)|(double)|(dotted)|(dashed)|(wavy)|(initial)|(inherit)",
		initial: "solid",
		values: [
			"solid",
			"double",
			"dotted",
			"dashed",
			"wavy",
			"initial",
			"inherit",
		],
	}),
	"text-indent": new CSSProperty({
		key: "textIndent",
		syntax: "([length])|(initial)|(inherit)",
		initial: "0",
		values: ["[length]", "[percent]", "initial", "inherit"],
	}),
	"text-justify": new CSSProperty({
		key: "textJustify",
		syntax: "(auto)|(inter-word)|(inter-character)|(none)|(initial)|(inherit)",
		initial: "auto",
		values: [
			"auto",
			"inter-word",
			"inter-character",
			"none",
			"initial",
			"inherit",
		],
	}),
	"text-overflow": new CSSProperty({
		key: "textOverflow",
		syntax: "(clip)|(ellipsis)|(string)|(initial)|(inherit)",
		initial: "clip",
		values: ["clip", "ellipsis", "string", "initial", "inherit"],
	}),
	"text-shadow": new CSSProperty({
		key: "textShadow",
		syntax: "h-shadow v-shadow blur-radius ([color])|(none)|(initial)|(inherit)",
		initial: "none",
		values: [
			"h-shadow",
			"v-shadow",
			"blur-radius",
			"[color]",
			"none",
			"initial",
			"inherit",
		],
	}),
	"text-transform": new CSSProperty({
		key: "textTransform",
		syntax: "(none)|(capitalize)|(uppercase)|(lowercase)|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"capitalize",
			"uppercase",
			"lowercase",
			"initial",
			"inherit",
		],
	}),
	top: new CSSProperty({
		key: "top",
		syntax: "(auto)|([length])|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "[length]", "[percent]", "initial", "inherit"],
	}),
	"transform(2D)": new CSSProperty({
		key: "transform(2D)",
		syntax: "(none)|([fn:matrix])|([fn:matrix3d])|([fn:translate])|([fn:translate3d])|([fn:translateX])|([fn:translateY])|([fn:translateZ])|([fn:scale])|([fn:scale3d])|([fn:scaleX])|([fn:scaleY])|([fn:scaleZ])|([fn:rotate])|([fn:rotate3d])|([fn:rotateX])|([fn:rotateY])|([fn:rotateZ])|([fn:skew])|([fn:skewX])|([fn:skewY])|([fn:perspective])|(initial)|(inherit)",
		initial: "none",
		values: [
			"none",
			"[fn:matrix]",
			"[fn:matrix3d]",
			"[fn:translate]",
			"[fn:translate3d]",
			"[fn:translateX]",
			"[fn:translateY]",
			"[fn:translateZ]",
			"[fn:scale]",
			"[fn:scale3d]",
			"[fn:scaleX]",
			"[fn:scaleY]",
			"[fn:scaleZ]",
			"[fn:rotate]",
			"[fn:rotate3d]",
			"[fn:rotateX]",
			"[fn:rotateY]",
			"[fn:rotateZ]",
			"[fn:skew]",
			"[fn:skewX]",
			"[fn:skewY]",
			"[fn:perspective]",
			"initial",
			"inherit",
		],
	}),
	"transform-origin(two-value syntax)": new CSSProperty({
		key: "transformOrigin(twoValue syntax)",
		syntax: "x-axis y-axis (z-axis)|(initial)|(inherit)",
		initial: "50% 50% 0",
		values: ["x-axis", "y-axis", "z-axis", "initial", "inherit"],
	}),
	"transform-style": new CSSProperty({
		key: "transformStyle",
		syntax: "(flat)|(preserve-3d)|(initial)|(inherit)",
		initial: "flat",
		values: ["flat", "preserve-3d", "initial", "inherit"],
	}),
	transition: new CSSProperty({
		key: "transition",
		syntax: "(([prop:transition-property]) ([prop:transition-duration]) ([prop:transition-timing-function]) ([prop:transition-delay]))|(initial)|(inherit)",
		initial: "all 0s ease 0s",
		values: [
			"[prop:transition-property]",
			"[prop:transition-duration]",
			"[prop:transition-timing-function]",
			"[prop:transition-delay]",
			"initial",
			"inherit",
		],
	}),
	"transition-delay": new CSSProperty({
		key: "transitionDelay",
		syntax: "([time])|(initial)|(inherit)",
		initial: "0s",
		values: ["[time]", "initial", "inherit"],
	}),
	"transition-duration": new CSSProperty({
		key: "transitionDuration",
		syntax: "([time])|(initial)|(inherit)",
		initial: "0s",
		values: ["[time]", "initial", "inherit"],
	}),
	"transition-property": new CSSProperty({
		key: "transitionProperty",
		syntax: "(none)|(all)|(property)|(initial)|(inherit)",
		initial: "all",
		values: ["none", "all", "property", "initial", "inherit"],
	}),
	"transition-timing-function": new CSSProperty({
		key: "transitionTimingFunction",
		syntax: "(linear)|(ease)|(ease-in)|(ease-out)|(ease-in-out)|(step-start)|(step-end)|([fn:steps])|([fn:cubic-bezier])|(initial)|(inherit)",
		initial: "ease",
		values: [
			"ease",
			"linear",
			"ease-in",
			"ease-out",
			"ease-in-out",
			"step-start",
			"step-end",
			"[fn:steps]",
			"[fn:cubic-bezier]",
			"initial",
			"inherit",
		],
	}),
	"unicode-bidi": new CSSProperty({
		key: "unicodeBidi",
		syntax: "(normal)|(embed)|(bidi-override)|(isolate)|(isolate-override)|(plaintext)|(initial)|(inherit)",
		initial: "normal",
		values: [
			"normal",
			"embed",
			"bidi-override",
			"isolate",
			"isolate-override",
			"plaintext",
			"initial",
			"inherit",
		],
	}),
	"user-select": new CSSProperty({
		key: "userSelect",
		syntax: "(auto)|(none)|(text)|(all)",
		initial: "auto",
		values: ["auto", "none", "text", "all"],
	}),
	"vertical-align": new CSSProperty({
		key: "verticalAlign",
		syntax: "(baseline)|([length])|(sub)|(super)|(top)|(text-top)|(middle)|(bottom)|(text-bottom)|(initial)|(inherit)",
		initial: "baseline",
		values: [
			"baseline",
			"[length]",
			"[percent]",
			"sub",
			"super",
			"top",
			"text-top",
			"middle",
			"bottom",
			"text-bottom",
			"initial",
			"inherit",
		],
	}),
	visibility: new CSSProperty({
		key: "visibility",
		syntax: "(visible)|(hidden)|(collapse)|(initial)|(inherit)",
		initial: "visible",
		values: ["visible", "hidden", "collapse", "initial", "inherit"],
	}),
	"white-space": new CSSProperty({
		key: "whiteSpace",
		syntax: "(normal)|(nowrap)|(pre)|(pre-line)|(pre-wrap)|(initial)|(inherit)",
		initial: "normal",
		values: [
			"normal",
			"nowrap",
			"pre",
			"pre-line",
			"pre-wrap",
			"initial",
			"inherit",
		],
	}),
	width: new CSSProperty({
		key: "width",
		syntax: "(auto)|([length])|([percent])|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "[length]", "[percent]", "initial", "inherit"],
	}),
	"word-break": new CSSProperty({
		key: "wordBreak",
		syntax: "(normal)|(break-all)|(keep-all)|(break-word)|(initial)|(inherit)",
		initial: "normal",
		values: [
			"normal",
			"break-all",
			"keep-all\u00a0",
			"break-word",
			"initial",
			"inherit",
		],
	}),
	"word-spacing": new CSSProperty({
		key: "wordSpacing",
		syntax: "(normal)|([length])|(initial)|(inherit)",
		initial: "normal",
		values: ["normal", "[length]", "initial", "inherit"],
	}),
	"word-wrap": new CSSProperty({
		key: "wordWrap",
		syntax: "(normal)|(break-word)|(initial)|(inherit)",
		initial: "normal",
		values: ["normal", "break-word", "initial", "inherit"],
	}),
	"writing-mode": new CSSProperty({
		key: "writingMode",
		syntax: "(horizontal-tb)|(vertical-rl)|(vertical-lr)",
		initial: "horizontal-tb",
		values: ["horizontal-tb", "vertical-rl", "vertical-lr"],
	}),
	"z-index": new CSSProperty({
		key: "zIndex",
		syntax: "(auto)|([number])|(initial)|(inherit)",
		initial: "auto",
		values: ["auto", "[number]", "initial", "inherit"],
	}),
};

export default CSS_PROPERTIES;
